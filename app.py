import streamlit as st
import requests
import tldextract
import whois
from bs4 import BeautifulSoup
from transformers import AutoTokenizer, AutoModelForSequenceClassification, pipeline

# ========== 1. Load model Hugging Face (ƒëa ng√¥n ng·ªØ) ==========
@st.cache_resource
def load_model():
    model_name = "nlptown/bert-base-multilingual-uncased-sentiment"
    tokenizer = AutoTokenizer.from_pretrained(model_name)
    model = AutoModelForSequenceClassification.from_pretrained(model_name)
    return pipeline("sentiment-analysis", model=model, tokenizer=tokenizer)

nlp_model = load_model()

# ========== 2. Rule-based checks ==========
def rule_based_check(url: str):
    issues = []
    score = 0

    domain_info = tldextract.extract(url)
    domain = f"{domain_info.domain}.{domain_info.suffix}"

    if len(url) > 75:
        issues.append("URL qu√° d√†i, c√≥ th·ªÉ l√† d·∫•u hi·ªáu gi·∫£ m·∫°o.")
        score += 1

    try:
        w = whois.whois(domain)
        if not w.organization:
            issues.append("WHOIS b·ªã ·∫©n ho·∫∑c thi·∫øu th√¥ng tin.")
            score += 1
    except Exception:
        issues.append("Kh√¥ng truy xu·∫•t ƒë∆∞·ª£c WHOIS.")
        score += 1

    if domain_info.suffix in ["tk", "ml", "ga", "cf", "gq"]:
        issues.append(f"Domain s·ª≠ d·ª•ng TLD mi·ªÖn ph√≠: {domain_info.suffix}")
        score += 1

    return score, issues

# ========== 3. AI-based checks ==========
def ai_based_check(url: str):
    try:
        response = requests.get(url, timeout=5)
        soup = BeautifulSoup(response.text, "html.parser")
        text_content = " ".join(soup.stripped_strings)[:500]  # l·∫•y 500 k√Ω t·ª± ƒë·∫ßu
        result = nlp_model(text_content)[0]
        return result
    except Exception as e:
        return {"label": "ERROR", "score": 0.0, "error": str(e)}

def map_sentiment_to_label(result):
    if "error" in result:
        return "ERROR", 0
    label = result["label"]
    score = int(label.split()[0])  # "1 star", "2 stars", ...
    if score <= 2:
        return "NEGATIVE", score
    else:
        return "POSITIVE", score

# ========== 4. Streamlit UI ==========
st.set_page_config(page_title="Fake Website Detector (VN/EN)", page_icon="üõ°Ô∏è", layout="wide")

st.title("üõ°Ô∏è Fake Website Detector (VN/EN)")
st.markdown("C√¥ng c·ª• ph√°t hi·ªán website gi·∫£ m·∫°o / l·ª´a ƒë·∫£o v·ªÅ Kit√¥ gi√°o & Kinh Th√°nh (ƒëa ng√¥n ng·ªØ).")

url = st.text_input("üîó Nh·∫≠p URL ƒë·ªÉ ki·ªÉm tra:", "https://example.com")

if st.button("Ki·ªÉm tra"):
    if not url.startswith("http"):
        st.warning("‚ö†Ô∏è H√£y nh·∫≠p URL ƒë·∫ßy ƒë·ªß (bao g·ªìm http:// ho·∫∑c https://)")
    else:
        with st.spinner("ƒêang ph√¢n t√≠ch..."):
            # Rule-based
            rule_score, rule_issues = rule_based_check(url)

            # AI-based
            ai_raw = ai_based_check(url)
            ai_label, ai_score = map_sentiment_to_label(ai_raw)

        # ========== Hi·ªÉn th·ªã k·∫øt qu·∫£ ==========
        st.subheader("üìä K·∫øt qu·∫£ ki·ªÉm tra")

        col1, col2 = st.columns(2)

        with col1:
            st.markdown("### Rule-based check")
            if rule_issues:
                for issue in rule_issues:
                    st.error(f"- {issue}")
            else:
                st.success("Kh√¥ng ph√°t hi·ªán d·∫•u hi·ªáu ƒë√°ng ng·ªù.")

        with col2:
            st.markdown("### AI-based check")
            if ai_label == "ERROR":
                st.error(f"L·ªói khi ph√¢n t√≠ch n·ªôi dung: {ai_raw.get('error')}")
            elif ai_label == "NEGATIVE":
                st.error(f"AI ƒë√°nh gi√° n·ªôi dung KH·∫¢ NGHI (‚â§2 sao)")
            else:
                st.success(f"AI ƒë√°nh gi√° n·ªôi dung AN TO√ÄN (‚â•3 sao)")

        # ========== T·ªïng k·∫øt ==========
        risk_level = rule_score
        if ai_label == "NEGATIVE":
            risk_level += 1

        st.subheader("üßæ K·∫øt lu·∫≠n")
        if risk_level >= 2:
            st.error("‚ö†Ô∏è Website c√≥ kh·∫£ nƒÉng GI·∫¢ M·∫†O ho·∫∑c L·ª™A ƒê·∫¢O.")
        else:
            st.success("‚úÖ Website c√≥ v·∫ª an to√†n.")
